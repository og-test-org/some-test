name: Test workflow for example 01

on:
  push:

jobs:
  create-branch:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Commit changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          FILE_TO_COMMIT: test.txt
          DESTINATION_BRANCH: release-${{ github.run_id }}
        run: |
          git config --global user.email "github-actions[bot]@noreply.com"
          git config --global user.name "github-actions[bot]"
          git checkout -b $DESTINATION_BRANCH
          git pull origin main --rebase
          git push --set-upstream origin $DESTINATION_BRANCH
          export TODAY=$( date -u '+%Y-%m-%d' )
          echo "$TODAY ${{ github.run_id }}" > test.txt
          export MESSAGE="chore: regenerate $FILE_TO_COMMIT for $TODAY"
          export SHA=$( git rev-parse $DESTINATION_BRANCH:$FILE_TO_COMMIT )
          export CONTENT=$( base64 -i $FILE_TO_COMMIT )
          gh api --method PUT /repos/:owner/:repo/contents/$FILE_TO_COMMIT \
            --field message="$MESSAGE" \
            --field content="$CONTENT" \
            --field encoding="base64" \
            --field branch="$DESTINATION_BRANCH" \
            --field sha="$SHA"
          gh pr create --title "Release ${{ github.run_id }}" --body "ðŸš¦ DeploymentAutoMerge: Enabled. " --fill
#  verify:
#    needs: [create-branch]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: verify
#        run: gh api --method GET /repos/:owner/:repo/commits/release-${{ github.run_id }} | jq '.commit.verification.verified'
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

#  verify:
#    needs: [create-branch]
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: verify
#        run: |
#          git pull
#          git remote update
#          git rev-parse --abbrev-ref HEAD
#          git log --graph --abbrev-commit --no-decorate -n 1 --show-signature origin/release-${{ github.run_id }}
#          export COMMIT_LOG=$(git log --graph --abbrev-commit --no-decorate -n 1 --show-signature origin/release-${{ github.run_id }})
#          export SUB="failed to parse signature"
#          export SUBTWO="Can't check signature"
#          if [[ "$COMMIT_LOG" == *"$SUB"* || "$COMMIT_LOG" == *"$SUBTWO"* ]]; then
#            echo "Failed to validate signature"
#            exit 1
#          fi
#          echo "success"